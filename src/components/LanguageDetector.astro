---
// Language detection component for automatic redirection
interface Props {
  currentLang?: string;
}

const { currentLang } = Astro.props;
---

<script>
  // Language detection and redirection logic
  document.addEventListener('DOMContentLoaded', function() {
    // Only run on the main index page (no language prefix)
    const currentPath = window.location.pathname;
    const basePath = import.meta.env.BASE_URL || '/';
    
    // Check if we're on the root page (no language prefix)
    const isRootPage = currentPath === basePath || currentPath === basePath.slice(0, -1);
    
    if (!isRootPage) {
      // We're already on a language-specific page, no need to redirect
      return;
    }
    
    // Available languages
    const languages = {
      en: 'English',
      sq: 'Shqip', 
      it: 'Italiano',
      pl: 'Polski',
      de: 'Deutsch'
    };
    
    // Detect browser language
    function detectBrowserLanguage() {
      const browserLanguages = navigator.languages || [navigator.language || navigator.userLanguage || 'en'];
      
      for (const browserLang of browserLanguages) {
        const langCode = browserLang.toLowerCase().split('-')[0];
        if (langCode in languages) {
          return langCode;
        }
      }
      
      return 'en'; // fallback
    }
    
    // Get preferred language
    function getPreferredLanguage() {
      // Check localStorage first
      const storedLang = localStorage.getItem('preferred-language');
      if (storedLang && storedLang in languages) {
        return storedLang;
      }
      
      // Otherwise detect from browser
      return detectBrowserLanguage();
    }
    
    // Check if this is a first-time visitor
    const hasVisited = localStorage.getItem('has-visited');
    const storedLang = localStorage.getItem('preferred-language');

    if (!hasVisited && !storedLang) {
      // First-time visitor - detect browser language and show suggestion
      const detectedLang = detectBrowserLanguage();

      if (detectedLang !== 'en') {
        showLanguageSuggestion(detectedLang);
      } else {
        // Browser is English, just mark as visited
        localStorage.setItem('has-visited', 'true');
        localStorage.setItem('preferred-language', 'en');
      }
    } else if (storedLang && storedLang !== 'en') {
      // Returning visitor with non-English preference - redirect
      const newUrl = basePath + storedLang + '/';
      window.location.replace(newUrl);
    } else {
      // Returning visitor or English preference - stay on English page
      localStorage.setItem('preferred-language', 'en');
    }

    // Show language suggestion banner
    function showLanguageSuggestion(suggestedLang) {
      const banner = document.createElement('div');
      banner.className = 'language-suggestion-banner';
      banner.innerHTML = `
        <div class="top-0 right-0 left-0 z-50 fixed bg-blue-600 shadow-lg px-4 py-3 text-white">
          <div class="flex justify-between items-center mx-auto max-w-7xl">
            <div class="flex items-center space-x-3">
              <span class="text-lg">${getLanguageFlag(suggestedLang)}</span>
              <span>We detected your browser language. Would you like to view this site in ${getLanguageName(suggestedLang)}?</span>
            </div>
            <div class="flex items-center space-x-3">
              <button onclick="acceptLanguage('${suggestedLang}')" class="bg-white hover:bg-gray-100 px-4 py-1 rounded font-medium text-blue-600 transition-colors">
                Yes, switch to ${getLanguageName(suggestedLang)}
              </button>
              <button onclick="dismissLanguageSuggestion()" class="text-white hover:text-gray-200 transition-colors">
                Stay in English
              </button>
            </div>
          </div>
        </div>
      `;

      document.body.appendChild(banner);

      // Add some top padding to body to account for banner
      document.body.style.paddingTop = '60px';
    }

    // Helper functions
    function getLanguageFlag(lang) {
      const flags = {
        sq: 'ðŸ‡¦ðŸ‡±',
        it: 'ðŸ‡®ðŸ‡¹',
        pl: 'ðŸ‡µðŸ‡±',
        de: 'ðŸ‡©ðŸ‡ª',
        en: 'ðŸ‡¬ðŸ‡§'
      };
      return flags[lang] || 'ðŸ‡¬ðŸ‡§';
    }

    function getLanguageName(lang) {
      const names = {
        sq: 'Albanian',
        it: 'Italian',
        pl: 'Polish',
        de: 'German',
        en: 'English'
      };
      return names[lang] || 'English';
    }

    // Global functions for banner buttons
    window.acceptLanguage = function(lang) {
      localStorage.setItem('preferred-language', lang);
      localStorage.setItem('has-visited', 'true');
      const newUrl = basePath + lang + '/';
      window.location.href = newUrl;
    };

    window.dismissLanguageSuggestion = function() {
      localStorage.setItem('preferred-language', 'en');
      localStorage.setItem('has-visited', 'true');
      const banner = document.querySelector('.language-suggestion-banner');
      if (banner) {
        banner.remove();
        document.body.style.paddingTop = '';
      }
    };
  });
</script>
